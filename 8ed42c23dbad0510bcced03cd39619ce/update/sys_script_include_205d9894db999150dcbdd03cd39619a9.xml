<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_codesanity.GetExecutionRulesForCheckByRules</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns the rules that are applicable to the given check based on the given execution rules.</description>
        <name>GetExecutionRulesForCheckByRules</name>
        <script><![CDATA[function GetExecutionRulesForCheckByRules(grCheck,rules)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	
	if (IsValidRecord(grCheck) == false)
	{
		return {};
	}
	
	var rulesForCheck = {};
	
	
	// BLACKLISTING - prevent specific checks from running
	
/*	
	
	var aBlacklistRules = GetArrayValue(GetValue(rules,'blacklist'));
	
	for (var nRule = 0; nRule < aBlacklistRules.length; nRule++)
	{
		var rule = aBlacklistRules[nRule];
		var aChecks = GetArrayValue(GetValue(rule,'checks'));
		
		var bAppliesToCheck = false;
		
		if (aChecks.length == 0) // no checks are specified in the rule: the rule applies to all checks
		{
			bAppliesToCheck = true;
		}
		else
		{
			for (var nCheck = 0; nCheck < aChecks.length; nCheck++)
			{
				var strCheck = aChecks[nCheck];
				if (strCheck == grCheck.getValue('name') || strCheck == GetStringValue(grCheck.sys_id))
				{
					bAppliesToCheck = true;
				}
			}
		}
		
		if (bAppliesToCheck == true)
		{
			var bAppliesToRecord = false;
			
			var aScopes = GetArrayValue(GetValue(rule,'scopes'));
			
			if (aScopes.length == 0)
			{
				bAppliesToRecord = true;
			}
			else
			{
				for (var nScope = 0; nScope < aScopes.length; nScope++)
				{
					var strScope = aScopes[nScope];
					if (strScope == strRecordScopeName || strScope == GetStringValue(grRecord.sys_scope) )
					{
						bAppliesToRecord = true;
					}
				}
			}
			if (bAppliesToRecord == true)
			{
				bResult = false;
			}
		}
	}
	
	
	
	// WHITELISTING - only run specific checks if conditions match
	
	var aWhitelistRules = GetArrayValue(GetValue(rules,'whitelist'));
	
	for (var nRule = 0; nRule < aWhitelistRules.length; nRule++)
	{
		var rule = aWhitelistRules[nRule];
		var aChecks = GetArrayValue(GetValue(rule,'checks'));
		
		var bAppliesToCheck = false;
		
		for (var nCheck = 0; nCheck < aChecks.length; nCheck++)
		{
			var strCheck = aChecks[nCheck];
			if (strCheck == grCheck.getValue('name') || strCheck == GetStringValue(grCheck.sys_id))
			{
				bAppliesToCheck = true;
			}
		}
		
		if (bAppliesToCheck == true)
		{
			bResult = false;
			
			var aScopes = GetArrayValue(GetValue(rule,'scopes'));
			
			for (var nScope = 0; nScope < aScopes.length; nScope++)
			{
				var strScope = aScopes[nScope];
				if (strScope == strRecordScopeName || strScope == GetStringValue(grRecord.sys_scope) )
				{
					bResult = true;
				}
			}
		}
	}	
	*/
	
	return rulesForCheck;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-09 16:00:44</sys_created_on>
        <sys_id>205d9894db999150dcbdd03cd39619a9</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>GetExecutionRulesForCheckByRules</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>sys_script_include_205d9894db999150dcbdd03cd39619a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-09 16:01:22</sys_updated_on>
    </sys_script_include>
</record_update>
