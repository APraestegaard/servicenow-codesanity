<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script/>
        <description/>
        <direct>false</direct>
        <endpoint>x_snc_codesanity_manual.do</endpoint>
        <html>&lt;?xml version="1.0" encoding="utf-8" ?&gt;&#13;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;&#13;
&lt;div style="padding-left: 20px;"&gt;&#13;
&lt;span style="visibility: hidden;"&gt;_CUT_HERE_&lt;/span&gt;&#13;
	&lt;g2:no_escape&gt;$[&#13;
		var docapi = new x_snc_devtools.DocumentationAPI('8ed42c23dbad0510bcced03cd39619ce');&#13;
		docapi.RenderHeader();&#13;
	]&lt;/g2:no_escape&gt;&#13;
	&#13;
	&lt;p&gt;Welcome to CodeSanity - created and maintained by&amp;#160;&lt;a href="mailto:sascha.wildgrube@servicenow.com"&gt;Sascha Wildgrube&lt;/a&gt;.&lt;/p&gt;&#13;
&#13;
	&lt;h2&gt;Features&lt;/h2&gt; &#13;
	&lt;p&gt;The CodeSanity app contains a number of instance scan checks to validate source code and other application files.&lt;/p&gt;&#13;
	&lt;p&gt;The CodeSanity scan suite can act as the foundation and master source for a coding guideline document.&lt;/p&gt;&#13;
	&lt;p&gt;Execution rules can be used to control which checks run on which applications and which do not.&lt;/p&gt;&#13;
&#13;
	&lt;h2&gt;Disclaimer&lt;/h2&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderDisclaimer()]&lt;/g2:no_escape&gt;	&#13;
	&#13;
	&lt;h2&gt;System Requirements&lt;/h2&gt;&#13;
	&lt;ul&gt;&#13;
		&lt;g2:no_escape&gt;$[&#13;
			docapi.RenderSystemRequirements(&#13;
				'Rome,San Diego',&#13;
				true,&#13;
				AppGetDependencies());&#13;
		]&lt;/g2:no_escape&gt;	&#13;
	&lt;/ul&gt;&#13;
	&#13;
	&lt;h2&gt;Installation&lt;/h2&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;g2:no_escape&gt;$[&#13;
			docapi.RenderInstallationInstructionsImportFromSourceControl(&#13;
				'DevTools',&#13;
				'https://github.com/saschawildgrube/servicenow-devtools');&#13;
		]&lt;/g2:no_escape&gt;&#13;
		&lt;g2:no_escape&gt;$[&#13;
			docapi.RenderInstallationInstructionsImportFromSourceControl(&#13;
				'CodeSanity',&#13;
				'https://github.com/saschawildgrube/servicenow-codesanity');&#13;
		]&lt;/g2:no_escape&gt;		&#13;
	&lt;/ol&gt;&#13;
&#13;
	&lt;h2&gt;Instance Scan checks contained in the CodeSanity app&lt;/h2&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderInstanceScanChecks()]&lt;/g2:no_escape&gt;	&#13;
	&#13;
	&lt;h2&gt;Testing the CodeSanity scan suite&lt;/h2&gt;&#13;
	&lt;p&gt;Each CodeSanity check comes with a corresponding ATF test to ensure its function. All tests are part of the CodeSanity&amp;#160;&lt;a href="/nav_to.do?uri=sys_atf_test_suite.do?sys_id=2c6758d3db4a8510bcced03cd396191d%26sysparm_view=DevTools" target="_blank"&gt;test suite&lt;/a&gt;. The check "&lt;a href="/nav_to.do?uri=scan_table_check.do?sys_id=53d43af1db8599109232dad1f396192c" target="_blank"&gt;CodeSanity - ATF tests for checks&lt;/a&gt;" verifies that there is an ATF test for each CodeSanity check.&lt;/p&gt;&#13;
	&#13;
	&lt;h2&gt;Adding checks to the CodeSanity scan suite&lt;/h2&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;Change the scope to the app which should contain your new check - this should NOT be the CodeSanity app. If you do not yet have a separate app, create one first.&lt;/li&gt;&#13;
		&lt;li&gt;Navigate to the "CodeSanity" menu.&lt;/li&gt;&#13;
		&lt;li&gt;Select "Add new check" in the menu.&lt;/li&gt;&#13;
		&lt;li&gt;Create and save the new check - it will automatically be added to the CodeSanity scan suite.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&#13;
	&lt;h2&gt;Execution rules&lt;/h2&gt;&#13;
	&lt;p&gt;In a larger developer community there might be variations in the coding guideline. Each and every project might have different rules - sometimes because a coding guideline has been introduced when many applications are already built or just because there are special considerations or coding patterns in use in a project.&lt;/p&gt;&#13;
	&lt;p&gt;Execution rules can be used to define which checks in the CodeSanity scan suite should run on which records and which should not.&lt;/p&gt;&#13;
	&lt;h3&gt;Blacklisting&lt;/h3&gt;&#13;
	&lt;p&gt;Blacklisting rules specify which checks should NOT run on records in specific app scopes. Use blacklisting rules if there are checks that just do not apply to one or more applications or which should be deactivated completely.&lt;/p&gt;&#13;
	&lt;h3&gt;Whitelisting&lt;/h3&gt;&#13;
	&lt;p&gt;Whitelisting rules specify checks that should ONLY run on records in specific app scopes. Use whitelisting rules if there are checks that only apply to one or more applications.&lt;/p&gt;&#13;
	&lt;p&gt;Whitelisting rules override blacklisting rules.&lt;/p&gt;&#13;
	&lt;h3&gt;Setup&lt;/h3&gt;&#13;
	&lt;p&gt;Follow these steps to set up execution rules:&lt;/p&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;If not done already create a new application that contains the execution rules.&lt;/li&gt;&#13;
		&lt;li&gt;Open the new app in Studio.&lt;/li&gt;&#13;
		&lt;li&gt;Create a script include based on the&amp;#160;&lt;a href="/nav_to.do?uri=sys_extension_point.do?sys_id=0f60e2f2db459d10dcbdd03cd39619df" target="_blank"&gt;CodeSanity extension point&lt;/a&gt;&amp;#160;example code.&lt;/li&gt;&#13;
		&lt;li&gt;Modify the function GetExecutionRules() - the examples demostrate how it works.&lt;/li&gt;&#13;
		&lt;li&gt;Create an extension point implementation and link it to the script include and the CodeSanity extension point.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&lt;p&gt;Checks and scopes can be referenced by Sys Id or by their name. Both options obviously have pros and cons. Sys Ids are not going to change, but names are easier to read - a tough decision.&lt;/p&gt; &#13;
	&#13;
	&lt;h2&gt;Creating a coding guideline document&lt;/h2&gt;&#13;
	&lt;p&gt;CodeSanity checks can become the foundation of a coding guideline document. The CodeSanity app contains the function&amp;#160;&lt;a href="/nav_to.do?uri=sys_script_include.do?sys_id=76dcff12dbf411109232dad1f3961902" target="_blank"&gt;HtmlRenderCodingGuideline&lt;/a&gt;&amp;#160;which outputs the descriptions of all checks contained in the CodeSanity scan suite so that they can be integrated into an html page. Follow these steps to create a UI page that can act as the organization's coding guideline document:&lt;/p&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;Switch the scope to the app that should contain the new UI page - this should NOT be "CodeSanity".&lt;/li&gt;&#13;
		&lt;li&gt;Create a new&amp;#160;&lt;a href="/nav_to.do?uri=%2Fsys_ui_page_list.do%3F" target="_blank"&gt;UI page&lt;/a&gt;.&lt;/li&gt;&#13;
		&lt;li&gt;Add the following code to the html template of the UI page:&#13;
&lt;pre&gt;&lt;![CDATA[&#13;
	&lt;g2:no_escape&gt;$[&#13;
		"$[x_snc_codesanity.HtmlRenderCodingGuideline();]";&#13;
	]&lt;/g2:no_escape&gt;	&#13;
]]&gt;&lt;/pre&gt;&#13;
		&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&lt;p&gt;The output of the UI page can then be transferred into a corporate wiki or the ui page acts as the coding guideline document itself.&lt;/p&gt;&#13;
	&lt;p&gt;There might be guidelines which are difficult to check mechanically. However a check could be created that does not produce any findings but that contains the documentation of the guideline. CodeSanity checks may hence become the master source for all coding guidelines - no matter if they can be checked mechanically or not.&lt;/p&gt;&#13;
&#13;
	&lt;h2&gt;Limitations and Caveats&lt;/h2&gt;&#13;
	&lt;ul&gt;&#13;
		&lt;li&gt;Under yet unspecified circumstances a suite scan against an app may not produce all relevant findings. The ServiceNow product development team is made aware of that problem.&lt;/li&gt;&#13;
		&lt;li&gt;Instance Scan does not work with scripts in Flow Designer. When scripted action steps are used such scripts are not considered in scans. The ServiceNow product development team is made aware of that problem.&lt;/li&gt;&#13;
	&lt;/ul&gt;&#13;
&#13;
	&lt;!--&#13;
	&lt;g2:no_escape&gt;$[HtmlRenderOtherInstanceScanChecks()]&lt;/g2:no_escape&gt;&#13;
--&gt;	&#13;
&#13;
	&lt;g2:no_escape&gt;$[x_snc_devtools.HtmlRenderLinkDirectory(GetLinkDirectoryInstanceScan())]&lt;/g2:no_escape&gt;&#13;
&#13;
	&#13;
&#13;
	&lt;h2&gt;Reference&lt;/h2&gt;&#13;
&#13;
	&lt;h3&gt;Extension Points&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderExtensionPoints()]&lt;/g2:no_escape&gt;		&#13;
	&#13;
	&lt;!--&#13;
	&lt;h3&gt;Configuration Options&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderProperties()]&lt;/g2:no_escape&gt;&#13;
--&gt;&#13;
	&lt;!--&#13;
	&lt;h3&gt;UI Actions&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderUIActions()]&lt;/g2:no_escape&gt;		&#13;
	&#13;
	&lt;h3&gt;Script Includes&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderScriptIncludes()]&lt;/g2:no_escape&gt;&#13;
--&gt;&#13;
	&lt;!--&#13;
	&lt;h3&gt;UI Scripts&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderUIScripts()]&lt;/g2:no_escape&gt;	&#13;
	&#13;
	&lt;h3&gt;Test step configurations&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderTestStepConfigurations()]&lt;/g2:no_escape&gt;&#13;
	&#13;
	&lt;h3&gt;Extension Points&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderExtensionPoints()]&lt;/g2:no_escape&gt;		&#13;
&#13;
	&lt;h3&gt;Business Rules&lt;/h3&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderBusinessRules()]&lt;/g2:no_escape&gt;	&#13;
--&gt;	&#13;
&#13;
	&lt;h2&gt;License&lt;/h2&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderCopyright(2022,'Sascha Wildgrube')]&lt;/g2:no_escape&gt;&#13;
	&lt;g2:no_escape&gt;$[docapi.RenderLicense()]&lt;/g2:no_escape&gt;&#13;
	&#13;
	&lt;h2&gt;Release Notes&lt;/h2&gt;  &#13;
&#13;
&lt;!--&#13;
	&lt;h3&gt;1._.0 - 2022-TODO&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;TODO: document changes here&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
--&gt;&#13;
	&#13;
	&lt;h3&gt;2.1.0 - 2022-TODO&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Sys IDs in scripts" does no longer check Fix Scripts (sys_script_fix).&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Sys IDs in scripts" now detects simple obfuscation strategies (i.e. splitting a sys_id in two or more concatenated strings).&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - String concatenation anti-pattern" has been removed as it turned out not to provide any real value.&lt;/li&gt;&#13;
		&lt;li&gt;AppInstall() now also executes DevTools' AppInstall() function.&lt;/li&gt;&#13;
	&lt;/ol&gt;	&#13;
	&#13;
	&lt;h3&gt;2.0.1 - 2022-08-25&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;A defect in IsCheckApplicableToRecord() caused checks not to run which are part of another scope than CodeSanity. This has been fixed.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&#13;
	&lt;h3&gt;2.0.0 - 2022-08-18&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;DevTools 1.42.0 is now required.&lt;/li&gt;&#13;
		&lt;li&gt;Introducing the "Execution Rules" feature to control which checks should run on which records - this requires ALL CodeSanity checks to use new function IsCheckApplicableToRecord() to check if the check should run on the given record.&lt;/li&gt;&#13;
		&lt;li&gt;Added guidance to the manual on how to create a coding guideline document based on CodeSanity checks.&lt;/li&gt;&#13;
		&lt;li&gt;The function HtmlRenderCodingGuideline() now also renders the execution rules that apply to a check.&lt;/li&gt;&#13;
		&lt;li&gt;When adding a new check the script field is prepopulated with the essential logic of a CodeSanity check.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - CodeSanity table checks apply rules" to make sure all CodeSanity table checks use the new function IsCheckApplicableToRecord().&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - CodeSanity linter checks apply rules" to make sure all CodeSanity linter checks use the new function IsCheckApplicableToRecord().&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - CodeSanity column type checks apply rules" to make sure all CodeSanity column type checks use the new function IsCheckApplicableToRecord().&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Checks must be tested using ATF" to ensure that all checks are covered by ATF tests.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Temporary tables" to test if there are temporary import tables left.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Do not run flows from scripts" to make sure that no script triggers flows or subflows.&lt;/li&gt;&#13;
		&lt;li&gt;Priority of new checks is set to "Critical" by default.&lt;/li&gt;&#13;
		&lt;li&gt;Added function IsCheckApplicableToRecord() to check if a check whould be applied to the given record.&lt;/li&gt;&#13;
		&lt;li&gt;Added extension point "CodeSanity" including the GetExecutionRules() function and added GetExecutionRules() function to collect execution rules from multiple extension point implementations.&lt;/li&gt;&#13;
		&lt;li&gt;The function HtmlRenderCodingGuideline() now renders line breaks in check descriptions properly.&lt;/li&gt;&#13;
		&lt;li&gt;Added ATF tests for various checks.&lt;/li&gt;&#13;
		&lt;li&gt;Updated manual on testing the CodeSanity scan suite.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&#13;
	&lt;h3&gt;1.6.0 - 2022-07-27 - Birthday Edition&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Script include has a valid name".&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - InstallerAPI without context".&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Avoid arrow functions". Although arrow functions are not yet supported in ServiceNow.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Widget checks for input".&lt;/li&gt;&#13;
		&lt;li&gt;The check "Checks for the bracket-dot anti-pattern" now allows the pattern "gs.getUser()." because we can assume that gs.getUser() always returns GlideUser object.&lt;/li&gt;&#13;
		&lt;li&gt;The check "Checks for the bracket-dot anti-pattern" now allows patterns like "$('needle')." to support jquery in sp_widget client code.&lt;/li&gt;&#13;
		&lt;li&gt;Renamed check "CodeSanity - [0] anti-pattern" to "CodeSanity - Constant array index anti-pattern".&lt;/li&gt;&#13;
		&lt;li&gt;Added the function HtmlrenderCodingGuideline() to produce ui pages that can serve as a coding guideline document.&lt;/li&gt;&#13;
		&lt;li&gt;This manual page no longer shows instance scan checks that are contained in other apps.&lt;/li&gt;&#13;
	&lt;/ol&gt;	&#13;
	&#13;
	&lt;h3&gt;1.5.0 - 2022-07-08&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;DevTools 1.40.0 is now required.&lt;/li&gt;&#13;
		&lt;li&gt;Check "CodeSanity - Bracket-dot anti-pattern" is now making an exception for sp_widget records to allow the pattern: "server.update().then(".&lt;/li&gt;&#13;
		&lt;li&gt;Check "CodeSanity - Sys IDs in scripts" has been updated to check only against letters from 'a' to 'f'.&lt;/li&gt;&#13;
		&lt;li&gt;Check "CodeSanity - String concatenation anti-pattern" now allows concatenated strings if the second string starts with a backslash and hence indicates an escaped character.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&#13;
	&lt;h3&gt;1.4.0 - 2022-06-12&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;DevTools 1.39.0 is now required.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - logging.verbosity system property".&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Script include must contain a class or function" was improved to avoid false negatives.&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Throwing exceptions" was improved to avoid false positives.&lt;/li&gt;&#13;
		&lt;li&gt;Added the "logging.verbosity" system property.&lt;/li&gt;&#13;
		&lt;li&gt;Added first ATF tests to verify the checks and removed the "AntiPattern" script includes.&lt;/li&gt;&#13;
	&lt;/ol&gt;	&#13;
	&#13;
	&lt;h3&gt;1.3.0 - 2022-06-10&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;Added the check "CodeSanity - UI Actions without comments".&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Application names in code" now considers the AppInstall() function as an exception.&lt;/li&gt;&#13;
		&lt;li&gt;The check "CodeSanity - Script include must contain a class or function" is now considering comments at the top of the script.&lt;/li&gt;&#13;
	&lt;/ol&gt;	&#13;
	&#13;
	&lt;h3&gt;1.2.0 - 2022-05-31&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;DevTools 1.38.0 is now required.&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Script include must contain a class or function".&lt;/li&gt;&#13;
		&lt;li&gt;Added check "CodeSanity - Table check code pattern".&lt;/li&gt;&#13;
		&lt;li&gt;The check against application names in code now considers application name postfixes (like "WORK IN PROGRESS" etc.).&lt;/li&gt;&#13;
		&lt;li&gt;The check against application names in code now considers specific code patterns as exceptions where it is unlikely that the string is actually the application name - i.e. where the string is more likely a class name or the name of an extension point.&lt;/li&gt;&#13;
		&lt;li&gt;The check against application names in code now considers the function x_snc_codesanity.GetScanSuiteRecord() and any script include containing "GetLinkDirectory" in the name as an exception.&lt;/li&gt;&#13;
		&lt;li&gt;The check against the [0] anti pattern is now considering any constant number pre or postfixed by whitespace characters.&lt;/li&gt;&#13;
		&lt;li&gt;More exceptions have been added for the check against Sys IDs in scripts.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
	&#13;
	&lt;h3&gt;1.1.0 - 2022-04-19&lt;/h3&gt;&#13;
	&lt;ol&gt;&#13;
		&lt;li&gt;DevTools 1.37.0 is now required.&lt;/li&gt;&#13;
		&lt;li&gt;Priority of all checks is now set to "Critical".&lt;/li&gt;&#13;
		&lt;li&gt;Refactored CodeSanity's own code not to trigger any findings other than in the honey pot script include "AntiPatterns".&lt;/li&gt;&#13;
		&lt;li&gt;Added a check against the use of application names in source code.&lt;/li&gt;&#13;
		&lt;li&gt;Added a check if the field "short_description" is used in a condition statement.&lt;/li&gt;&#13;
		&lt;li&gt;Added a check against using the Date class constructor without parameters.&lt;/li&gt;&#13;
		&lt;li&gt;Added a check against the bracket-dot anti-pattern.&lt;/li&gt;&#13;
		&lt;li&gt;Added a check against the string concatenation anti-pattern.&lt;/li&gt;&#13;
		&lt;li&gt;Several exceptions have been added for the check against Sys IDs in scripts as some specific functions will need to contain Sys IDs no matter what.&lt;/li&gt;&#13;
		&lt;li&gt;Corrected a defect in the check against Sys IDs in source code.&lt;/li&gt;&#13;
	&lt;/ol&gt;&#13;
&#13;
	&lt;h3&gt;1.0.0 - 2022-03-15&lt;/h3&gt;&#13;
	&lt;p&gt;First baselined version&lt;/p&gt;&#13;
&#13;
&lt;span style="visibility: hidden;"&gt;_CUT_HERE_&lt;/span&gt;&#13;
&lt;/div&gt;&#13;
&lt;/j:jelly&gt;</html>
        <name>manual</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-10 09:51:04</sys_created_on>
        <sys_id>ec6718d3db4a8510bcced03cd39619ff</sys_id>
        <sys_mod_count>122</sys_mod_count>
        <sys_name>manual</sys_name>
        <sys_package display_value="CodeSanity WORK IN PROGRESS" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity WORK IN PROGRESS">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>sys_ui_page_ec6718d3db4a8510bcced03cd39619ff</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-07 13:56:22</sys_updated_on>
    </sys_ui_page>
</record_update>
