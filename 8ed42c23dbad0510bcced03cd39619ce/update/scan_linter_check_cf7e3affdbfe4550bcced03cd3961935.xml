<?xml version="1.0" encoding="UTF-8"?><record_update table="scan_linter_check">
    <scan_linter_check action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>code_sanity</category>
        <description>If two constant string literals are concatenated this is eventually to outmaneuver source code sanity checks - e.g. against the use of Sys IDs in source code.  </description>
        <documentation_url/>
        <name>CodeSanity - String concatenation anti-pattern</name>
        <priority>1</priority>
        <resolution_details>Fix the actual issue and do not concatenate two constant string literals.</resolution_details>
        <run_condition/>
        <score_max>100</score_max>
        <score_min>0</score_min>
        <score_scale>1</score_scale>
        <script><![CDATA[(function (engine) {

	var GetStringValue = x_snc_devtools.GetStringValue;
	
	var strSource = GetStringValue(engine.rootNode.toSource());
	
	if (/([^n\>][\"\']\s*\+\s*[\"\'][^\<])/.test(strSource))
	{
		engine.finding.incrementWithNode(engine.rootNode);
	}

})(engine);]]></script>
        <short_description>Checks against the string concatenation anti-pattern</short_description>
        <sys_class_name>scan_linter_check</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-04-18 18:07:41</sys_created_on>
        <sys_id>cf7e3affdbfe4550bcced03cd3961935</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>CodeSanity - String concatenation anti-pattern</sys_name>
        <sys_package display_value="CodeSanity" source="x_snc_codesanity">8ed42c23dbad0510bcced03cd39619ce</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeSanity">8ed42c23dbad0510bcced03cd39619ce</sys_scope>
        <sys_update_name>scan_linter_check_cf7e3affdbfe4550bcced03cd3961935</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-04-18 18:46:40</sys_updated_on>
    </scan_linter_check>
</record_update>
